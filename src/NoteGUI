import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.SwingUtilities;

/**
 *
 * @author sarah
 */
public class NoteUI extends javax.swing.JFrame {

    HashMap<String,Note> notes = new HashMap<String,Note>();


    /**
     * Creates new form NoteUI
     * @param directory
     */

    public NoteUI(String directory) {
        initComponents();
        String newline = null;
        String newLine = "\n";



        jTextArea1.setText("Loading notes from directory: " + directory + newLine);
        File folder = new File(directory);
        File[] listOfFiles = folder.listFiles();
        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isFile() && listOfFiles[i].getName().contains(".txt")) {
                Note note = new Note(listOfFiles[i]);
                notes.put(note.getName(),note);
            }
        }

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jTextField1.setText("jTextField1");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("NOTE PARSER"));
        jPanel1.setToolTipText("NOTE PARSER");
        jPanel1.setLayout(new java.awt.BorderLayout());

        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton1.setText("UsingMentions");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setText("MentionList");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setText("UsingKeywords");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setText("KeywordList");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setText("SelectedWord");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton6.setText("Topological");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        jButton7.setText("Chronological");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton8.setText("Length");
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton8);

        jButton9.setText("Favorites");
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);

        jButton10.setText("FavoriteEdit");
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton10);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.LINE_END);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>


    //*FOUND IN CASE NEED TO USE SYSTEM STREAM*//
/*private void updateTextArea(final String text) {
    SwingUtilities.invokeLater(new Runnable() {
        public void run() {
            jTextArea1.append(text);
        }
    });
}

private void redirectSystemStreams() {
    OutputStream out = new OutputStream() {
        @Override
    public void write(int b) throws IOException {
        updateTextArea(String.valueOf((char) b));
    }

    @Override
        public void write(byte[] b, int off, int len) throws IOException {
            updateTextArea(new String(b, off, len));
    }

    @Override
        public void write(byte[] b) throws IOException {
            write(b, 0, b.length);
        }
    };

    System.setOut(new PrintStream(out, true));
    System.setErr(new PrintStream(out, true));
  }*/

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        /*System.out.println("Notes containing one or more mentions:");
                for (String noteName: notes.keySet()) {
                     Note note = notes.get(noteName);
                if (note.hasMentions()) {
                     System.out.println(noteName);
                 }
             }*/
        String newLine = "\n";
        jTextArea1.append(newLine + "Notes containing one or more mentions:" + newLine);
        notes.keySet().forEach((noteName) -> {
            Note note = notes.get(noteName);
            if (note.hasMentions()) {
                jTextArea1.append(noteName + newLine);
            }
        });
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String newLine = "\n";
        jTextArea1.append(newLine + "Notes containing one or more keywords:" + newLine);
        notes.keySet().forEach((noteName) -> {
            Note note = notes.get(noteName);
            if (note.hasKeywords()) {
                jTextArea1.append(noteName + newLine);
            }
        });
    }

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String newLine = "\n";
        jTextArea1.append(newLine + "Notes organized by mentions:" + newLine);
        notes.keySet().stream().map((noteName) -> notes.get(noteName)).filter((note) -> (note.hasMentions())).forEachOrdered((note) -> {
                    ArrayList<String> mNote = note.getMentions();
                    String mName = note.getName();
                    String nameRes = "Name: ";

                    String result = "Mentions: ";
                    result += mNote + " ";
                    nameRes += mName + " ";
                    jTextArea1.append(nameRes + result + newLine);
                }
        );
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String newLine = "\n";
        jTextArea1.append(newLine + "Notes organized by keywords:" + newLine);
        notes.keySet().stream().map((noteName) -> notes.get(noteName)).filter((note) -> (note.hasKeywords())).forEachOrdered((note) -> {
            ArrayList<String> kNote = note.getKeywords();
            String kName = note.getName();
            String kNameRes = "Name: ";

            String kResult = "Keywords: ";
            kResult += kNote + " ";
            kNameRes += kName + " ";
            jTextArea1.append(kNameRes + kResult + newLine);

        });
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String newLine = "\n";
        jTextArea1.append(newLine + "Notes in topological order:" + newLine);
        notes.keySet().forEach((noteName) -> {
            jTextArea1.append(noteName);
            jTextArea1.append(newLine);
        });
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //COME BACK TO WHEN YOU FIGURE OUT INPUTING TERM
        String newLine = "\n";
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String newLine = "\n";
        jTextArea1.append(newLine + "Notes in chronological order:" + newLine);
        ArrayList<Note> notesSorted = new ArrayList<Note>();
        notes.keySet().forEach((noteName) -> {
            notesSorted.add(notes.get(noteName));
        });
        Collections.sort(notesSorted, new Comparator<Note>() {
            @Override
            public int compare(Note n1, Note n2) {
                return (int)(n1.getTime() - n2.getTime());
            }
        });
        notesSorted.forEach((note) -> {
            String noteName = note.getName();
            Date date = new Date(note.getTime());
            jTextArea1.append(noteName + "\t\t" + date);
            jTextArea1.append(newLine);

        });
    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String newLine = "\n";
        jTextArea1.append(newLine + "Notes in order of length:" + newLine);
        ArrayList<Note> notesSorted = new ArrayList<Note>();
        notes.keySet().forEach((noteName) -> {
            notesSorted.add(notes.get(noteName));
        });
        Collections.sort(notesSorted, (Note n1, Note n2) -> (int)(n1.getLength() - n2.getLength()));
        notesSorted.forEach((note) -> {
            String noteName = note.getName();
            String length = note.getLength() + " characters";
            jTextArea1.append(noteName + "\t\t" + length);
            jTextArea1.append(newLine);
        });
    }

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String newLine = "\n";
        int countTrue = 0;
        int countFalse = 1;
        int sizeOriginal = 0;
        jTextArea1.append(newLine + "Notes in order of favorites: " + newLine);
        ArrayList<Note> notesFavorited = new ArrayList<Note>();//Unsorted array of all notes
        notes.keySet().forEach((noteName) -> {
            //Loop to add all notes from hash map to an array
            notesFavorited.add(notes.get(noteName));
        });

        sizeOriginal = notesFavorited.size();//Size of unsorted array
        Note sortedNotes[] = new Note[sizeOriginal];//Sorted array intialized

        for(int i = 0; i < sizeOriginal; i++) { //Loop to sort all the notes based on favorite
            if(notesFavorited.get(i).getFavorite() == true){//If note is true(favorited), add to beginning of sorted array
                sortedNotes[countTrue] = notesFavorited.get(i);
                countTrue++;
            }
            else { //If note is false(unfavorited), add to end of sorted array
                sortedNotes[sizeOriginal - countFalse] = notesFavorited.get(i);
                countFalse++;
            }
        }

        //Loop to print out report sorted by favorites
        for(int i = 0; i < sizeOriginal; i++){
            String noteName;
            noteName = sortedNotes[i].getName();
            if (sortedNotes[i].getFavorite() == true) {
                jTextArea1.append(noteName + ": Favorited");
                jTextArea1.append(newLine);
            }
            else {
                jTextArea1.append(noteName);
                jTextArea1.append(newLine);
            }
        }
    }

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    // Method to parse Note file

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String directory = "C:\\Users\\sarah\\Documents\\NetBeansProjects\\TeamAB_HW2_WSp\\src\\teamab_hw2_wsp";
                new NoteUI(directory).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration
}

